using consoleAppForStudents.SH;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;


/*
    Create a console application that does the following:

    1. Request the user to enter the name of a school, then list all the students in 
       that school together with a count.
    2. Display a count of students in each School 
    3. Create a stored procedure for inserting data into the Student table.
*/

/* 
    Reverse Engineering with EF Core: 
    - Generate C# classes from an existing database schema.
    - Let me use LINQ & C# to query/manipulate data.

    SchoolContext: 
    - My DbContext class (generated by EF Core). It manages the database connection and
      provides access to the database sets.

    context: 
    - An instance of the SchoolContext class, bridge my C# application and the database. 
*/

SchoolContext context = new();

/*
    Function to get all students in a specific school and print their names.
*/
void GetAllStudentsInSchool(string schoolName)
{
    var studentsInSchool = context.Students
    .Where(s => s.School == schoolName)
    .Select(s => new { s.FirstName, s.LastName });

    foreach (var student in studentsInSchool)
    {
        Console.WriteLine($"Student: {student.FirstName} {student.LastName} is in the same school");
    }
}

/*
    Function to count the number of students in a specific school and print the count.
*/
void CountStudentsInSchool(string schoolName)
{
    var countStudents = context.Students.Where(s => s.School == schoolName).Count();

    Console.WriteLine($"There are {countStudents} students in the same school");
}

/*
    Function to validate user input for school name. No null or empty input allowed.
*/
bool validateInput(string userInput)
{
    if (string.IsNullOrWhiteSpace(userInput))
    {
        Console.WriteLine("Invalid input. Please enter a valid school name.");
        return false;
    }
    return true;
}

/*
    Function to match the case of user input with the case of school names in the database.
*/
string matchCaseInputAndSchoolName(string userInput)
{
    var caseMatchSchoolName = userInput.Substring(0, 1).ToUpper() + userInput.Substring(1).ToLower();

    return caseMatchSchoolName;
}


/*
    Function to show students in the same school and count them based on user input.
*/
void ShowStudentsAndCountSameSchool()
{
    Console.Write("Enter the name of a school: ");
    string userPromptSchoolName = Console.ReadLine() ?? string.Empty;

    validateInput(userPromptSchoolName);
    userPromptSchoolName = matchCaseInputAndSchoolName(userPromptSchoolName);
    GetAllStudentsInSchool(userPromptSchoolName);
    CountStudentsInSchool(userPromptSchoolName);
}

/*
    Function to count and display the number of students in each school.
*/
void CountStudentsInEachSchool()
{
    var countStudentsInEachSchool = context.Students
    .GroupBy(s => s.School)
    .Select(sg => new
    {
        schoolName = sg.Key,
        studentCount = sg.Count()
    });

    foreach (var schoolCount in countStudentsInEachSchool)
    {
        Console.WriteLine($" {schoolCount.schoolName}: {schoolCount.studentCount} students");
    }
}


// Execute the functions
ShowStudentsAndCountSameSchool();
Console.WriteLine("\n ============= Count of Students in Each School ============= \n");
CountStudentsInEachSchool();


/*
    STORED PROCEDURE
    function to insert a new student using the stored procedure.
*/
// void InsertStudentSP(string firstName, string lastName, string school)
// {
//     var fName = new SqlParameter("@FirstName", firstName);
//     var lName = new SqlParameter("@LastName", lastName);
//     var sName = new SqlParameter("@School", school);

//     var result = context.Database.ExecuteSqlRaw(" dbo.StudentInsert @FirstName, @LastName, @School", fName, lName, sName);
// }

// InsertStudentSP("Yujin", "Jeong", "Computing");
// Console.WriteLine("\n ============= After Inserting New Student ============= \n");
